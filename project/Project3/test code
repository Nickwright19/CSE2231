import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.map.Map;

/**
 * JUnit test fixture for {@code Map<String, String>}'s constructor and kernel
 * methods.
 *
 * @author Put your name here
 *
 */
public abstract class MapTest {

    /**
     * Invokes the appropriate {@code Map} constructor for the implementation
     * under test and returns the result.
     *
     * @return the new map
     * @ensures constructorTest = {}
     */
    protected abstract Map<String, String> constructorTest();

    /**
     * Invokes the appropriate {@code Map} constructor for the reference
     * implementation and returns the result.
     *
     * @return the new map
     * @ensures constructorRef = {}
     */
    protected abstract Map<String, String> constructorRef();

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the implementation
     * under test type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsTest = [pairs in args]
     */
    private Map<String, String> createFromArgsTest(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorTest();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the reference
     * implementation type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsRef = [pairs in args]
     */
    private Map<String, String> createFromArgsRef(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorRef();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    // TODO - add test cases for constructor, add, remove, removeAny, value,
    // hasKey, and size

    /**
     * Test Constructor.
    */
   @Test
   public final void testConstructor() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25", "Dave", "19");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }
   /**
    * Test Constructor.
   */
  @Test
   public final void testConstructorEmpty() {
      /*
       * ,* Set up variables ,
       */
      Map<String, String> s = this.createFromArgsTest();
      Map<String, String> sExpected = this.createFromArgsRef();
      /*
       * ,* Assert that values of variables match expectations ,
       */
      assertEquals(s, sExpected);
  }
  /**
   * Test Constructor.
  */
 @Test
   public final void testConstructorWithSixKVPairs() {
     /*
      * ,* Set up variables ,
      */
     Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19",
             "Doug", "29", "James", "95", "Fatima", "19", "Rebecca", "31");
     Map<String, String> sExpected = this.createFromArgsRef("Bob", "25",
             "Dave", "19", "Doug", "29", "James", "95", "Fatima", "19", "Rebecca", "31");
     /*
      * ,* Assert that values of variables match expectations ,
      */
     assertEquals(s, sExpected);
 }

   /**
    * Test add.
    */
   @Test
   public final void testAddEmptyAtStart() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest();
       Map<String, String> sExpected = this.createFromArgsRef("Dave", "23");
       /*
        * ,* Call method under test ,
        */
       s.add("Dave", "23");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }
   /**
    * Test add.
    */
   @Test
   public final void testAddMultiple() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest();
       Map<String, String> sExpected = this.createFromArgsRef("Dave", "23",
               "Mark", "26", "Laura", "19");
       /*
        * ,* Call method under test ,
        */
       s.add("Dave", "23");
       s.add("Mark", "26");
       s.add("Laura", "19");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }
   /**
    * Test add.
    */
   @Test
   public final void testAdd() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest();
       Map<String, String> sExpected = this.createFromArgsRef("Dave", "23");
       /*
        * ,* Call method under test ,
        */
       s.add("Dave", "23");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }

   /**
    * Test remove.
    */
   @Test
   public final void testRemove() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25");
       /*
        * ,* Call method under test ,
        */
       s.remove("Dave");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }
   /**
    * Test remove.
    */
   @Test
   public final void testRemoveNonExistentKey() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25", "Dave", "19");
       /*
        * ,* Call method under test ,
        */
       s.remove("Billy");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }
   /**
    * Test remove.
    */
   @Test
   public final void testRemoveMany() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19",
               "Connor", "20", "Maddy", "23");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25");
       /*
        * ,* Call method under test ,
        */
       s.remove("Dave");
       s.remove("Connor");
       s.remove("Maddy");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }



   /**
    * Test remove any.
    */
   @Test
   public final void testRemoveAny() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Dave", "19");
       /*
        * ,* Call method under test ,
        */
       s.removeAny();
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(s, sExpected);
   }

  /**
   * Test value.
   */
  @Test
   public final void testValue() {
      /*
       * ,* Set up variables ,
       */
      Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
      Map<String, String> sExpected = this.createFromArgsRef("Bob", "25", "Dave", "19");
      /*
       * ,* Call method under test ,
       */
      String name = "";
      name = s.value("19");
      /*
       * ,* Assert that values of variables match expectations ,
       */
      assertEquals(name, "Dave");

      assertEquals(s, sExpected);
  }


   /**
    * Test has Key.
    */
   @Test
   public final void testHasKey() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25", "Dave", "19");
       /*
        * ,* Call method under test ,
        */
       boolean bool = s.hasKey("Bob");
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(bool, true);
       assertEquals(s, sExpected);
   }

   /**
    * Test size.
    */
   @Test
   public final void testSize() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest("Bob", "25", "Dave", "19");
       Map<String, String> sExpected = this.createFromArgsRef("Bob", "25", "Dave", "19");
       /*
        * ,* Call method under test ,
        */
       int size = s.size();
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(size, 2);
       assertEquals(s, sExpected);
   }

   /**
    * Test size.
    */
   @Test
   public final void testSizeEmpty() {
       /*
        * ,* Set up variables ,
        */
       Map<String, String> s = this.createFromArgsTest();
       Map<String, String> sExpected = this.createFromArgsRef();
       /*
        * ,* Call method under test ,
        */
       int size = s.size();
       /*
        * ,* Assert that values of variables match expectations ,
        */
       assertEquals(size, 0);
       assertEquals(s, sExpected);
   }

}
